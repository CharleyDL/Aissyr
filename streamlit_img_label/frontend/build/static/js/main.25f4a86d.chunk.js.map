{
    "version": 3,
    "sources": [
        "StreamlitImgLabel.tsx",
        "index.tsx",
        "StreamlitImgLabel.module.css"
    ],
    "names": [
        "withStreamlitConnection",
        "props",
        "dataUri",
        "useState",
        "mode",
        "setMode",
        "labels",
        "setLabels",
        "fabric",
        "Canvas",
        "canvas",
        "setCanvas",
        "args",
        "canvasWidth",
        "canvasHeight",
        "imageData",
        "newBBoxIndex",
        "setNewBBoxIndex",
        "invisCanvas",
        "document",
        "createElement",
        "ctx",
        "getContext",
        "width",
        "height",
        "idata",
        "createImageData",
        "data",
        "set",
        "putImageData",
        "toDataURL",
        "useEffect",
        "rects",
        "boxColor",
        "canvasTmp",
        "enableRetinaScaling",
        "backgroundImage",
        "uniScaleTransform",
        "forEach",
        "rect",
        "top",
        "left",
        "add",
        "Rect",
        "fill",
        "objectCaching",
        "stroke",
        "strokeWidth",
        "strokeUniform",
        "hasRotatingPoint",
        "map",
        "label",
        "Streamlit",
        "setFrameHeight",
        "clearHandler",
        "getObjects",
        "remove",
        "sendCoordinates",
        "returnLabels",
        "i",
        "getBoundingRect",
        "setComponentValue",
        "on",
        "renderAll",
        "off",
        "onSelectMode",
        "body",
        "classList",
        "window",
        "matchMedia",
        "addEventListener",
        "e",
        "matches",
        "removeEventListener",
        "id",
        "className",
        "styles",
        "dark",
        "onClick",
        "box",
        "selectObject",
        "getActiveObject",
        "selectIndex",
        "indexOf",
        "filter",
        "ReactDOM",
        "render",
        "StrictMode",
        "getElementById",
        "module",
        "exports"
    ],
    "mappings": "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",
    "file": "static/js/main.25f4a86d.chunk.js",
    "sourcesContent": [
        "import React, { useEffect, useState } from \"react\"\nimport {\n    ComponentProps,\n    Streamlit,\n    withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport { fabric } from \"fabric\"\nimport styles from \"./StreamlitImgLabel.module.css\"\n\ninterface RectProps {\n    top: number\n    left: number\n    width: number\n    height: number\n    label: string\n}\n\ninterface PythonArgs {\n    canvasWidth: number\n    canvasHeight: number\n    rects: RectProps[]\n    boxColor: string\n    imageData: Uint8ClampedArray\n}\n\nconst StreamlitImgLabel = (props: ComponentProps) => {\n    const [mode, setMode] = useState<string>(\"light\")\n    const [labels, setLabels] = useState<string[]>([])\n    const [canvas, setCanvas] = useState(new fabric.Canvas(\"\"))\n    const { canvasWidth, canvasHeight, imageData }: PythonArgs = props.args\n    const [newBBoxIndex, setNewBBoxIndex] = useState<number>(0)\n\n    /*\n     * Translate Python image data to a JavaScript Image\n     */\n    var invisCanvas = document.createElement(\"canvas\")\n    var ctx = invisCanvas.getContext(\"2d\")\n\n    invisCanvas.width = canvasWidth\n    invisCanvas.height = canvasHeight\n\n    // create imageData object\n    let dataUri: any\n    if (ctx) {\n        var idata = ctx.createImageData(canvasWidth, canvasHeight)\n\n        // set our buffer as source\n        idata.data.set(imageData)\n\n        // update canvas with new data\n        ctx.putImageData(idata, 0, 0)\n        dataUri = invisCanvas.toDataURL()\n    } else {\n        dataUri = \"\"\n    }\n\n    // Initialize canvas on mount and add a rectangle\n    useEffect(() => {\n        const { rects, boxColor }: PythonArgs = props.args\n        const canvasTmp = new fabric.Canvas(\"c\", {\n            enableRetinaScaling: false,\n            backgroundImage: dataUri,\n            uniScaleTransform: true,\n        })\n\n        rects.forEach((rect) => {\n            const { top, left, width, height } = rect\n            canvasTmp.add(\n                new fabric.Rect({\n                    left,\n                    top,\n                    fill: \"\",\n                    width,\n                    height,\n                    objectCaching: true,\n                    stroke: boxColor,\n                    strokeWidth: 1,\n                    strokeUniform: true,\n                    hasRotatingPoint: false,\n                })\n            )\n        })\n        setLabels(rects.map((rect) => rect.label))\n\n        setCanvas(canvasTmp)\n        Streamlit.setFrameHeight()\n        // eslint-disable-next-line\n    }, [canvasHeight, canvasWidth, dataUri])\n\n    // Create defualt bounding box\n    const defaultBox = () => ({\n        left: canvasWidth * 0.15 + newBBoxIndex * 3,\n        top: canvasHeight * 0.15 + newBBoxIndex * 3,\n        width: canvasWidth * 0.2,\n        height: canvasHeight * 0.2,\n    })\n\n    // Add new bounding box to be image\n    const addBoxHandler = () => {\n        const box = defaultBox()\n        setNewBBoxIndex(newBBoxIndex + 1)\n        canvas.add(\n            new fabric.Rect({\n                ...box,\n                fill: \"\",\n                objectCaching: true,\n                stroke: props.args.boxColor,\n                strokeWidth: 1,\n                strokeUniform: true,\n                hasRotatingPoint: false,\n            })\n        )\n        sendCoordinates([...labels, \"\"])\n    }\n\n    // Remove the selected bounding box\n    const removeBoxHandler = () => {\n        const selectObject = canvas.getActiveObject()\n        const selectIndex = canvas.getObjects().indexOf(selectObject)\n        canvas.remove(selectObject)\n        sendCoordinates(labels.filter((label, i) => i !== selectIndex))\n    }\n\n    // Reset the bounding boxes\n    const resetHandler = () => {\n        clearHandler()\n        const { rects, boxColor }: PythonArgs = props.args\n        rects.forEach((rect) => {\n            const { top, left, width, height } = rect\n            canvas.add(\n                new fabric.Rect({\n                    left,\n                    top,\n                    fill: \"\",\n                    width,\n                    height,\n                    objectCaching: true,\n                    stroke: boxColor,\n                    strokeWidth: 1,\n                    strokeUniform: true,\n                    hasRotatingPoint: false,\n                })\n            )\n        })\n        sendCoordinates(labels)\n    }\n\n    // Remove all the bounding boxes\n    const clearHandler = () => {\n        setNewBBoxIndex(0)\n        canvas.getObjects().forEach((rect) => canvas.remove(rect))\n        sendCoordinates([])\n    }\n\n    // Send the coordinates of the rectangle back to streamlit.\n    const sendCoordinates = (returnLabels: string[]) => {\n        setLabels(returnLabels)\n        const rects = canvas.getObjects().map((rect, i) => ({\n            ...rect.getBoundingRect(),\n            label: returnLabels[i],\n        }))\n        Streamlit.setComponentValue({ rects })\n    }\n\n    // Update the bounding boxes when modified\n    useEffect(() => {\n        if (!canvas) {\n            return\n        }\n        const handleEvent = () => {\n            canvas.renderAll()\n            sendCoordinates(labels)\n        }\n\n        canvas.on(\"object:modified\", handleEvent)\n        return () => {\n            canvas.off(\"object:modified\")\n        }\n    })\n\n    // Adjust the theme according to the system\n    const onSelectMode = (mode: string) => {\n        setMode(mode)\n        if (mode === \"dark\") document.body.classList.add(\"dark-mode\")\n        else document.body.classList.remove(\"dark-mode\")\n    }\n\n    useEffect(() => {\n        // Add listener to update styles\n        window\n            .matchMedia(\"(prefers-color-scheme: dark)\")\n            .addEventListener(\"change\", (e) =>\n                onSelectMode(e.matches ? \"dark\" : \"light\")\n            )\n\n        // Setup dark/light mode for the first time\n        onSelectMode(\n            window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n                ? \"dark\"\n                : \"light\"\n        )\n\n        // Remove listener\n        return () => {\n            window\n                .matchMedia(\"(prefers-color-scheme: dark)\")\n                .removeEventListener(\"change\", () => {})\n        }\n    }, [])\n\n    return (\n        <>\n            <canvas\n                id=\"c\"\n                className={mode === \"dark\" ? styles.dark : \"\"}\n                width={canvasWidth}\n                height={canvasHeight}\n            />\n            <div className={mode === \"dark\" ? styles.dark : \"\"}>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={addBoxHandler}\n                >\n                    Add bounding box\n                </button>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={removeBoxHandler}\n                >\n                    Remove select\n                </button>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={resetHandler}\n                >\n                    Reset\n                </button>\n                <button\n                    className={mode === \"dark\" ? styles.dark : \"\"}\n                    onClick={clearHandler}\n                >\n                    Clear all\n                </button>\n            </div>\n        </>\n    )\n}\n\nexport default withStreamlitConnection(StreamlitImgLabel)\n",
        "import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitImgLabel from \"./StreamlitImgLabel\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <StreamlitImgLabel />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n",
        "// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"StreamlitImgLabel_dark__PyW4C\"};"
    ],
    "sourceRoot": ""
}